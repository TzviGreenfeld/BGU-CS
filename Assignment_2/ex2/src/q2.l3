

(define make-ok
  (lambda (val)
    (cons "Ok" val)
  )
 )
 

(define make-error
  (lambda (msg)
    (cons "Failure" msg)
  )
 )


(define ok?
  (lambda (res)
    (if (pair? res)
     (eq? (car res) "Ok")
     #f
    )
  )
)


(define error?
  (lambda (res)
    (if (pair? res)
     (eq? (car res) "Failure")
     #f
    )
  )
)


(define result?
  (lambda (res)
    (or (ok? res) (error? res))
  )
)

(define result->val
  (lambda (res)
     (cdr res)
  )
)


(define bind 
  (lambda (f)
    (lambda (res)
    (if (ok? res) (f (cdr res)) (make-error (cdr res)))
    )
  )
)


(define make-dict
  (lambda ()
    '()
  )
)


(define dict?
  (lambda (e)
    (if (empty? e) #t
       (if (pair? e)
          (if (pair? (car e))
            (dict? (cdr e))
            #f
          )
        #f  
      )
    )
  )
)


(define get
  (lambda (dict k)
    (if (dict? dict)
         (if (empty? dict)
             (make-error "Key not found")
             (if (eq? (car (car dict)) k)
                 (make-ok (cdr (car dict)))
                 (get (cdr dict) k)
              )
          )
         (make-error "Error: not a dictionary")
    )
  )
)


(define put
  (lambda (dict k v)
    (if (dict? dict)
      (if (ok? (get dict k))
        (put (remove k dict) k v)
        (if (empty? dict)
            (make-ok (cons (cons k v) (make-dict)))
            (make-ok (cons (cons k v)  dict))
        )
      )
      (make-error "Error: not a dictionary")    
    )
  )
)

(define remove
  (lambda (x lst)
    (if (empty? lst)
        lst
        (if (eq? (car (car lst)) x)
            (cdr lst)
            (con

(define remove
  (lambda (x lst)
    (if (empty? lst)
        lst
        (if (eq? (car (car lst)) x)
            (cdr lst)
            (cons (car lst) (remove x (cdr lst)))))))


(define map-dict
  (lambda (dict f)
    (if (dict? dict)
    (if (empty? dict)
        (make-ok dict)
        (make-ok (cons (cons (car (car dict)) (f (cdr (car dict)))) (map-dict-non-ok (cdr dict) f))))
    (make-error "Error: not a dictionary"))
 ) 
)
  
(define map-dict-non-ok
  (lambda (dict f)
    (if (empty? dict)
        dict
        (cons (cons (car (car dict)) (f (cdr (car dict)))) (map-dict-non-ok (cdr dict) f)))
 ) 
)


(define filter-dict
  (lambda (dict pred)
      (if (dict? dict)
          (make-ok (filter-remove dict pred))
          (make-error "Error: not a dictionary"))
  )
)

(define filter-remove
  (lambda (lst pred)
    (if (empty? lst)
        lst
        (if (pred (car lst))
            (cons (car lst) (filter-remove (cdr lst) pred))
            (filter-remove (cdr lst) pred)))))




s (car lst) (remove x (cdr lst)))))))


(define map-dict
  (lambda (dict f)
    (if (dict? dict)
    (if (empty? dict)
        (make-ok dict)
        (make-ok (cons (cons (car (car dict)) (f (cdr (car dict)))) (map-dict-non-ok (cdr dict) f))))
    (make-error "Error: not a dictionary"))
 ) 
)
  
(define map-dict-non-ok
  (lambda (dict f)
    (if (empty? dict)
        dict
        (cons (cons (car (car dict)) (f (cdr (car dict)))) (map-dict-non-ok (cdr dict) f)))
 ) 
)


(define filter-dict
  (lambda (dict pred)
      (if (dict? dict)
          (make-ok (filter-remove dict pred))
          (make-error "Error: not a dictionary"))
  )
)

(define filter-remove
  (lambda (lst pred)
    (if (empty? lst)
        lst
        (if (pred (car (car lst)) (cdr (car lst)))
            (cons (car lst) (filter-remove (cdr lst) pred))
            (filter-remove (cdr lst) pred)))))


