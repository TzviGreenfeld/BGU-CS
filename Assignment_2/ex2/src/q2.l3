;; pair of string 'ok' and value
(define make-ok
  (lambda (val)
    (cons "Ok" val)
  )
 )
 
;; pair based on makeFailure
(define make-error
  (lambda (msg)
    (cons "Failure" msg)
  )
 )

;; returns true if res is pair and the first item of a given pair is the string "ok"
(define ok?
  (lambda (res)
    (if (pair? res)
     (equal? (car res) "Ok" )
     )
  )
 )


;; same as ok but the string is "Failure"
(define error?
  (lambda (res)
    (if (pair? res)
     (equal? (car res) "Failure" )
     )
  )
 )

;; true if res is ok or error
(define result?
  (lambda (res)
    (or (ok? res) (error? res))
  )
 )

(define result->val
  (lambda (res)
    @TODO
  )
)

(define bind 
  (lambda (f)
    @TODO
  )
)

(define make-dict
  (lambda ()
    @TODO
  )
)

(define dict?
  (lambda (e)
    @TODO
  )
)

(define get
  (lambda (dict k)
    @TODO
  )
)

(define put
  (lambda (dict k v)
    @TODO
  )
)

(define map-dict
  (lambda (dict f)
    @TODO
  )
)

(define filter-dict
  (lambda (dict pred)
    @TODO
  )
)
